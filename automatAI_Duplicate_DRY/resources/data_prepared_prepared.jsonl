{"prompt":"import pandas\nimport math\nimport pandas as pd\n\n\nclass HomeScreen:\n\n    def sum_two_numbers(self, a, b):\n        c = a + b\n        return c\n\n    def subtraction_num(self, a, b):\n        c = a - b\n        return c      import math\nimport openpyxl\n\n\nclass LoginScreen:\n\n    def sum_two_numbers(self, a, b):\n        c = a + b\n        return c\n\n    def subtraction_two_num(self, a, b):\n        c = a - b\n        return c\n\n    def mulwertyu(self, num1, num2):\n        result = math.ceil(num1 * num2)\n        return result      import math\n\n\nclass paymentScreen:\n\n    def sum_two_numbers(self, a, b):\n        c = a + b\n        return c\n\n    def readAndWriteText(self):\n        file1 = open(\"myfile.txt\", \"w\")\n        L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]\n        file1.writelines(L)\n        file1.close()\n        # Append-adds at last\n        file1 = open(\"myfile.txt\", \"a\")  # append mode\n        file1.write(\"Today \\n\")\n        file1.close()\n        file1 = open(\"myfile.txt\", \"r\")\n        print(\"Output of Readlines after appending\")\n        print(file1.readlines())\n        print()\n        file1.close()\n\n    def asfsaf(self, a, b):\n        soo = math.ceil(a * b)\n        return soo            Find the duplicate and similar code\n\n###\n\n","completion":" sum_two_numbers : Method is present in HomeScreen, LoginScreen and PaymentScreen  \n        def sum_two_numbers(self, a, b):\n        c = a + b\n        return c\n        \n    sum_two_numbers is exact same. \n    Method Description = Method will return the sum of numbers\n    \n2 - subtraction_num and subtraction_two_num : Method is present in HomeScreen and LoginScreen\n        def subtraction_num(self, a, b):\n            c = a - b\n            return c\n        \n        def subtraction_two_num(self, a, b):\n            c = a - b\n            return c\n        \n    subtraction_num and  subtraction_two_num  are similar. Method name is different but implementation is same.\n    Method Description = Method will return the subtraction of two numbers\n    \n3 - mulwertyu and asfsaf : Method is present in LoginScreen and PaymentScreen\n     def mulwertyu(self, num1, num2):\n        result = math.ceil(num1 * num2)\n        return result\n     \n      def asfsaf(self, a, b):\n        soo = math.ceil(a * b)\n        return soo\n        \n     mulwertyu and asfsaf are duplicate(plagiarism) as the method name and variables are different but other implementation is same\n     Method Description = Method will Calculate the product of two numbers and return the result rounded up to the nearest integer using the math.ceil() function and return the value.\n END"}
{"prompt":"import pandas\nimport math\nimport pandas as pd\n\n\nclass HomeScreen:      def read_excelSheet_local(self, path):\n        dataframe1 = pd.read_excel(path)\n        print(dataframe1)\n\n    def validator_prime_number(self, lo, hi, pe):\n        for num in range(lo, hi + 1):\n            flag = 0\n            if num < 2:\n                flag = 1\n            if num % 2 == 0:\n                continue\n            if num % 3 == 0:\n                continue\n            iter = 2\n            while iter < int(pow(num, 0.5)):\n                if num % iter == 0:\n                    flag = 1\n                    break\n                iter += 1\n            if flag == 0:\n                pe.append(num)\n        print(pe)     import math\nimport openpyxl\n\n\nclass LoginScreen:    def qweqrqerq(self):\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        # Sum of the two input numbers\n        spasm = num1 + num2\n        # Output the result\n        print(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n        return spasm\n\n    def read_excel_local_sheet_TestData(self, path):\n        dataframe = openpyxl.load_workbook(path)\n        dataframe1 = dataframe.active\n        for row in range(0, dataframe1.max_row):\n            for col in dataframe1.iter_cols(1, dataframe1.max_column):\n                print(col[row].value)     import math\n\n\nclass paymentScreen:     def rajajaijdaisjf(self):\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        # Sum of the two input numbers\n        sum = num1 + num2\n        # Output the result\n        print(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n\n    def prime_checker_ValidateChecker(self, low, high, primes):\n        for num in range(low, high + 1):\n            flag = 0\n            if num < 2:\n                flag = 1\n            if num % 2 == 0:\n                continue\n            if num % 3 == 0:\n                continue\n            iter = 3\n\n            while iter < int(pow(num, 0.5)):\n                if num % iter == 0:\n                    flag = 1\n                    break\n                iter += 2\n            if flag == 0:\n                primes.append(num)\n\n        print(primes)    Find the duplicate and similar code  \n\n###\n\n","completion":" read_excelSheet_local and subtraction_two_num : Method is present in HomeScreen and LoginScreen\n        def read_excelSheet_local(self, path):\n            dataframe1 = pd.read_excel(path)\n            print(dataframe1)\n        \n        def read_excel_local_sheet_TestData(self, path):\n            dataframe = openpyxl.load_workbook(path)\n            dataframe1 = dataframe.active\n            for row in range(0, dataframe1.max_row):\n                for col in dataframe1.iter_cols(1, dataframe1.max_column):\n                    print(col[row].value)\n        \n    read_excelSheet_local and  read_excel_local_sheet_TestData are similar. Method name is different but implementation is same.\n    Method Description =  Method will accesses the active sheet of the workbook and then iterates over the row\n    \n2 - validator_prime_number and prime_checker_ValidateChecker : Method is present in LoginScreen and PaymentScreen\n        def validator_prime_number(self, lo, hi, pe):\n            for num in range(lo, hi + 1):\n                flag = 0\n                if num < 2:\n                    flag = 1\n                if num % 2 == 0:\n                    continue\n                if num % 3 == 0:\n                    continue\n                iter = 2\n                while iter < int(pow(num, 0.5)):\n                    if num % iter == 0:\n                        flag = 1\n                        break\n                    iter += 1\n                if flag == 0:\n                    pe.append(num)\n            print(pe)\n     \n        def prime_checker_ValidateChecker(self, low, high, primes):\n            for num in range(low, high + 1):\n                flag = 0\n                if num < 2:\n                    flag = 1\n                if num % 2 == 0:\n                    continue\n                if num % 3 == 0:\n                    continue\n                iter = 3\n    \n                while iter < int(pow(num, 0.5)):\n                    if num % iter == 0:\n                        flag = 1\n                        break\n                    iter += 2\n                if flag == 0:\n                    primes.append(num)\n    \n            print(primes)\n        \n     validator_prime_number and prime_checker_ValidateChecker are similar as the implementation is same\n     Method Description = Method will print all the prime number in the given range.\n3 - qweqrqerq and rajajaijdaisjf : Method is present in LoginScreen and PaymentScreen\n\n    def qweqrqerq(self):\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        # Sum of the two input numbers\n        spasm = num1 + num2\n        # Output the result\n        print(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n        return spasm\n    \n    def rajajaijdaisjf(self):\n        num1 = int(input(\"Enter the first number: \"))\n        num2 = int(input(\"Enter the second number: \"))\n        # Sum of the two input numbers\n        sum = num1 + num2\n        # Output the result\n        print(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n        \n    qweqrqerq and rajajaijdaisjf are similar as the implementation is same\n    Method Description =  Method will prompts the user to enter two numbers, calculates their sum, and assigns it to the variable sum. It then prints the sum using the print() function.\n END"}
{"prompt":"class HelloJi:\n    def addMethod(self,a, b):\n        return a + b\n\n    def subMethod(self,d, e):\n        return d - e\n\n    def is_prime(self, n):\n        #Returns True if n is a prime number, False otherwise.\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n        \nclass Raja:\n    def addMethod(self, a, b):\n        return a + b\n\n    def subMethodaad(self, d, e):\n        a = d -e\n        return a\n\n    def multipyMethod(self, f, g):\n        return f*g      \n Find the duplicate and similar code \n\n###\n\n","completion":" addMethod : Method is present in HelloJi and Raja\n        def addMethod(self,a, b):\n            return a + b\n        \n        \n    addMethod is exact same in both the classes.\n    Method Description =  Method will return the sum of two numbers.\n\n2 - subMethod  and subMethodaad : Similar Method is present in HelloJi and Raja\n        def subMethod(self,d, e):\n            return d - e\n        \n        def subMethodaad(self, d, e):\n            a = d -e\n            return a   \n    subMethod and subMethodaad is similar as they both have same implementation\n    Method Description =  Method will return the subtraction of two numbers. END"}
